
[{"content":"\r第一次自己報名 Game Jam，還好遇到好隊友！ #\r這次我是一個人報名 Game Jam，選擇由主辦單位協助分組。週五晚上初次與組員見面，分組結果出乎意料地平均：\n兩位美術：婷 \u0026amp; 蘋（2D 繪圖 / 3D 建模）\n程式：我（擅長 Godot） \u0026amp; 柏輝（Unity 老手）\n企劃：摺學家（諧音梗王、摺紙高手）\n討論過後，考量柏輝在 Unity 上已有 8 年經驗，因此我們決定使用 Unity 作為本次開發引擎。我負責主菜單與音效功能，柏輝負責整體架構與核心玩法。我們利用有限狀態機來設計場景切換流程：\n主菜單 → 新聞 → 選英雄 → 結算畫面 一拍即合的隊伍氣氛 #\r到會場後，我們先聊彼此為什麼來參加 Game Jam，發現大家的目的一致：交朋友、找合作夥伴、挑戰自己。更巧的是，我們竟然有三位來自同一家公司！頓時多了些熟悉感，也聽了不少業內八卦。\n題目是「SuperHero」！我們的發想過程 #\r主辦方在第一天八點宣布題目：「SuperHero」。我們立刻打開 Canvas 當白板，展開創意腦力激盪。從搞笑英雄、日常英雄、潛入行動到面試設定，全部都丟上去。\n以下是我們共同編輯的創意發想心智圖：\n最後票選出的點子：英雄面試官 #\r我們在麥當勞開到凌晨，最終拍板定案：製作一款「英雄面試模擬器」，讓玩家扮演超級英雄事務所的面試官，透過問話、履歷觀察、背景調查等方式，決定誰可以加入超英團隊。\n為了設計更完善的邏輯與流程，我們參考《請出示證件》的遊戲設計，並畫出以下分析圖：\n這張圖幫助我們理解整個遊戲判斷的邏輯與情境設計，並以此延伸屬於我們的版本。\n技術合作與版本管理 #\r我們使用 GitHub 管理版本，雖然一開始還很認真寫 commit message，但越到後面越趕，最後只剩「修 Bug」、「123123」這種隨便的詞 XD PIZZA 與意外的心理測驗 #\r第二天晚上，主辦單位請大家吃 Pizza，整個場面很像黑客松，大家邊吃邊聊靈感。\n就在這時，摺學家問了我們兩道問題：\n最喜歡的顏色？最喜歡的動物？\n他說這是心理測驗，還幫我們解讀含意。沒想到，第三天早上，他竟然送我們每人一個小禮物——用我們喜歡顏色的紙摺出來的喜歡動物！超驚喜又超感動。\n三天兩夜，我們真的做出一款遊戲！ #\r在會場上也見到了幾位 Godot 社群的熟面孔，像是 Muryan 和 OpSource，他們這次都是以個人身分參賽，分別完成了《超喵英雄》與《冷凍英雄》兩款作品，主題風格截然不同但都非常有趣。\n最讓我佩服的是，他們都是一個人從頭開發到完成，從企劃、美術到程式全包，這真的需要超強的意志力和執行力，令人敬佩！\n這場 Game Jam 對我來說是一個絕佳的學習與體驗機會。幾個重要的心得：\n好的團隊會讓開發過程很愉快\n創意是需要碰撞與互相激發的\n希望未來還有更多機會能和這群有趣又專業的夥伴合作！\n最後結果：Call of Sorry 拿下第一，我們也表現不錯！ #\r第一名的作品是《CALL OF SORRY》，一款讓英雄幫忙跟長官道歉的遊戲，不只搞笑，完成度也超高。\n這次的評分方式是由各組互評，我們的成績如下：\n雖然我們這組沒有拿到獎項，但認識這群夥伴、並且經歷這幾天的密集合作，才是這次最棒的收穫！\n","date":"22 May 2025","externalUrl":null,"permalink":"/gamedev/2025-garena-game-jam/","section":"遊戲開發","summary":"","title":"2025 Garena Game Jam 心得：從零組隊到做出一款遊戲！","type":"gamedev"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/gamedev/","section":"Tags","summary":"","title":"GameDev","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/","section":"彼得叩叩","summary":"","title":"彼得叩叩","type":"page"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/gamedev/","section":"遊戲開發","summary":"","title":"遊戲開發","type":"gamedev"},{"content":"\r遊戲簡介 #\r這是一款 2011 年推出的經典手機遊戲，其特色是單一按鍵操作：\n按住時角色上升，放開時角色會自然下墜\n地圖會自動向左捲動，障礙從右側生成\n玩家需閃避電網、飛彈，並盡可能遠行、收集金幣\n連結為原始遊戲影片： https://youtu.be/mU_BMvLBgY8 成果分享 #\r這是「20 款遊戲挑戰」中的第 2 步，過程中學習以下：\n重複利用前一款的資料或程式碼\n儲存高分的機制\n加入簡單音效（包含跑步、噴射、受傷）\n加入粒子效果（例如噴射火焰）\n點選以下連結試玩： https://peter-kncok-code.itch.io/jetpack\n場景架構總覽 #\r這次我採用 Godot 建立以下場景結構：\n┖╴Main\r┠╴background2D (Node2D)：背景群組，用來包含多層捲動背景\r┃ ┠╴background1 (Sprite2D)：第一張背景圖，用來做視差捲動\r┃ ┖╴background2 (Sprite2D)：第二張背景圖，與 background1 輪流重複\r┠╴Player (CharacterBody2D)：玩家角色，負責控制移動與碰撞\r┃ ┠╴CollisionShape2D (CollisionShape2D)：碰撞框\r┃ ┠╴AnimatedSprite2D (AnimatedSprite2D)：角色動畫（跑步、跳躍等）\r┃ ┠╴CPUParticles2D (CPUParticles2D)：噴射粒子效果（噴射火焰）\r┃ ┠╴RunAudio (AudioStreamPlayer2D)：跑步聲音\r┃ ┠╴JetAudio (AudioStreamPlayer2D)：噴射時的火焰音效\r┃ ┖╴HurtAudio (AudioStreamPlayer2D)：受傷音效（撞到陷阱、飛彈）\r┠╴Ground (TileMapLayer)：地板，由 tilemap 組成，會自動向左移動\r┠╴Trap (Area2D)：靜態陷阱（如電網），可與玩家碰撞觸發扣血\r┃ ┠╴AnimatedSprite2D (AnimatedSprite2D)：陷阱動畫（如電光）\r┃ ┖╴CollisionShape2D (CollisionShape2D)：陷阱碰撞框\r┠╴CoinSpawner (Node)：產生金幣群組的腳本控制器\r┠╴TrapSpawner (Node)：產生陷阱的控制器\r┃ ┖╴MissileWarningSpawner (Node)：追蹤玩家高度、先產生警告圖再發射飛彈\r┠╴HUD (CanvasLayer)：顯示 UI 分數、金幣、生命等資訊的畫面層\r┃ ┠╴CoinLabel (Label)：顯示目前取得的金幣數量\r┃ ┠╴DistanceLabel (Label)：顯示目前奔跑距離\r┃ ┠╴HeartFull1 (Sprite2D)：顯示目前剩餘血量的圖案（愛心）\r┃ ┠╴HeartFull2 ┃ ┠╴HeartFull3\r┃ ┠╴HeartEmpty1 (Sprite2D)：顯示已失去血量（灰色愛心）\r┃ ┠╴HeartEmpty2\r┃ ┠╴HeartEmpty3 ┃ ┖╴JumpBtn (TouchScreenButton)：手機版使用者點擊畫面跳躍（模擬空白鍵）\r┖╴AudioStreamPlayer2D (AudioStreamPlayer2D)：背景音樂播放器 小技巧補充：你可以在任意節點加上下列程式碼，自動列印場景樹！\nfunc _ready(): print_tree_pretty() 踩坑記錄與解法 #\rTileMapLayer 產生地板 #\r一開始用 StaticBody2D + add_child() 不斷新增地板，結果節點太多、效能下降。\n改用 TileMapLayer 並動態平移與補格，達成無限捲動效果，效能大幅提升。\n音效播放被 queue_free() 清除 #\r角色受傷後要播放音效再消失，若直接寫：\nfunc _on_body_entered(body): if body.is_in_group(\u0026#34;Player\u0026#34;): audio_player.play() queue_free() 結果聲音根本播不出來！因為節點馬上被刪掉了。\n解法是先隱藏並關掉碰撞，等音效播完再刪除：\nvisible = false $CollisionShape2D.disabled = true audio_player.play() audio_player.connect(\u0026#34;finished\u0026#34;, Callable(self, \u0026#34;queue_free\u0026#34;)) TouchScreenButton 必須設定 InputMap #\r我原本以為 TouchScreenButton 放上去就能按，但其實需要設定 action 為 ui_accept，才能與空白鍵邏輯對應。\n小結與下一步 #\r這款《瘋狂噴射機》是我在「20 款遊戲挑戰」中的第二款作品，練習了粒子效果、簡單音效與 UI 設計，也在效能優化上學到不少技巧。\n雖然還有可以再雕琢的地方，但在限定時間內完成預定功能，已經很滿足。這次的經驗會帶進下一款遊戲中。\n","date":"15 May 2025","externalUrl":null,"permalink":"/gamedev/20-games-2-jetpack-joyride/","section":"遊戲開發","summary":"","title":"【20 Games 挑戰 #2】Jetpack Joyride ","type":"gamedev"},{"content":"大家好~這兩周努力改善橫向跑酷的遊戲環節。\n▋ 必須做出取捨\n我希望利用 AI 來幫助我繪製角色。光是畫老婆角色的行走精靈圖，我就花了一整週，而且最終的成果讓我覺得沒有特色。\n然而，我剩下的時間只有半個月，不可能在短時間內學會如何繪製精靈圖、設計角色及對應的動作。因此，我決定改用免費素材。\n在 Itch.io 素材庫，我找到許多優秀的素材，這將大幅減少我的工作量，讓我能更專注於遊戲的其他部分。\n▋ 排定優先事項\n由於這次的遊戲發表日是在婚禮上，當天當然不可能臨時宣布遊戲延期🤣\n因此，我列出了必須完成的清單，並按照優先順序進行規劃。當我刪除加分但非必要的項目後，發現工作量竟然減少了 80%！\n這次讓我深刻體會到訂定明確目標的重要。\n▋ 婚禮後預期做遊戲教學\n遊戲開發過程中，經常需要學習各種技術。\n每當我在網路上查找資料並成功實作後，過了幾天如果又遇到類似的技術，我往往還得重新複習或重看資料。\n因此，製作教學不僅能幫助我統整這些資料，也能記錄下我的學習過程，讓未來查找時更加方便。\n畫面搶先看👇\n未命名設計.mp4\n如果你有任何建議，或是覺得有哪些細節可以調整，我都非常期待你的回應！你可以隨時寄信到我的信箱：\nmylifeai1116@gmail.com\n期待和你交流！\n— Peter\n","date":"23 February 2025","externalUrl":null,"permalink":"/newsletter/2025w08/","section":"Newsletters","summary":"","title":"2025 W08 距離婚禮還有兩週！我該如何完成遊戲？","type":"newsletter"},{"content":"","date":"23 February 2025","externalUrl":null,"permalink":"/newsletter/","section":"Newsletters","summary":"","title":"Newsletters","type":"newsletter"},{"content":"嗨，大家新年快樂！🎉\n之前提過，我正在為婚禮製作一款遊戲，希望透過這款遊戲，讓婚禮的來賓輕鬆了解我和老婆相識的故事。\n▋ 遊戲玩法的轉變\n最開始，我考慮以跑酷類型的玩法呈現，讓玩家在奔跑中逐步揭開我們的故事。\n但慢慢發現這樣的形式，雖然有趣，但並不能完全傳達我們之間那些特別的小瞬間，反而讓核心故事有點模糊。\n於是，我改用對話型互動遊戲的方式來呈現\n——像互動小說一樣，透過不同場景的對話述說故事。\n不過，我並沒有完全放棄跑酷玩法！\n它會被穿插在對話之間，作為一種小挑戰，但會降低遊戲的難度和時間。\n▋ 找適合的插件\n為了實現遊戲玩法，我尋找適合管理對話的插件。\n在 Godot 引擎中，有兩款值得探索的開源插件：\ngodot_dialogue_manager\ndialogic\n💡 小提示： 如果你在選擇插件時猶豫，可以查看 GitHub 上的 Issues 和 星星數。這是我挑選插件時的一個小技巧，幫助我快速判斷插件的活躍程度和穩定性。\n經過研究比較後，我選擇了 Dialogue Manager，因為它的設計對初學者來說相對友好，讓我可以快速上手開始實作。\n▋ 在 Godot 使用插件的方法\n這裡有一個簡單的步驟分享：\n進入 Godot Asset Library，搜尋你需要的插件名稱。\n下載插件\n下載完成後，預設是未啟用，需要到 Project Settings 裡啟動插件。\n▋ 遊戲的進度\n目前我已經熟悉了 Dialogue Manager 的基本用法，正在設計對話場景並撰寫文案。這部分挑戰還挺大的，因為我需要回想起很多和老婆之間的小故事，確保每一段對話都能打動人心。\n進度搶先看👇\n如果你有任何建議、對插件有經驗，或是覺得有哪些細節可以調整，我都非常期待你的回應！你可以隨時寄信到我的信箱：\nmylifeai1116@gmail.com\n期待和你交流，也謝謝你一路上的支持！🌟\n— Peter\n","date":"6 February 2025","externalUrl":null,"permalink":"/newsletter/2025w06/","section":"Newsletters","summary":"","title":"2025 W06 婚禮遊戲日誌：改變核心玩法","type":"newsletter"},{"content":"開始一件事情前，先搞清楚目的究竟是什麼？目標對象是誰？ 這些問題是成功的起點。\n最近，我準備了關於傳統機器視覺的報告，內容涵蓋了論文的每個細節，甚至深入到算法的數學推導。\n然而，報告結束後，同事們的回饋讓我意識到一個重大問題：\n「這場會議的目的是幫助團隊了解領域趨勢，而不是深入探討技術細節。」\n這句話讓我瞬間清醒。\n當我全身心投入到論文的世界，努力將每一個細節都學透時，其實忽略了這次分享的真正目標：幫助大家快速掌握全局，理解趨勢。\n▋目標客群在技術選擇中的重要性\n我的工作中，經常需要在深度學習和傳統算法之間做選擇，而這個選擇背後，與目標客群的需求密切相關。我來分享兩個典型的案例：\n案例一：跨國金融企業的需求\n需求：極高的準確率，不能出錯。\n資源：高預算與高性能硬體設備。\n在這種情況下，深度學習成為首選。雖然需要更多的計算資源，但其高精度能夠滿足金融企業對錯誤率接近零的要求。\n案例二：超商打卡系統的需求\n需求：能容忍一定程度的錯誤，且運行速度快。\n資源：有限的預算與普通硬體設備。\n對於這類場景，傳統算法可能更適合。它對硬體需求低，運算速度快，並且部署成本更低。\n這兩個案例看起來很好選擇，但實際在許多時候，我們面對的是——未知的客戶需求。\n產品還未正式推出市場時，對未來客戶只能做假設，而這些假設會直接影響技術選擇和開發方向。\n這也是為什麼開頭我會報告傳統算法原因：\n「在不確定的情況下，準備多樣的選擇，才能更從容地應對未來的挑戰。」\n▋我的反思：技術的價值在於解決需求\n過去，我總認為技術的深度決定了它的價值。\n但這次經歷讓我認識到：\n技術的真正價值，不在於你學得多深，而在於是否能解決目標客群的實際需求。\n無論是準備報告、學習新技術，還是開發產品，首先要思考：\n目標是誰？需求是什麼？\n這些問題會讓我們的工作更加高效，也更加有意義。\n歡迎回覆給我，分享你的經驗或問題，我會很樂意和你交流！我的信箱如下：\nmylifeai1116@gmail.com\n— Peter\n","date":"23 January 2025","externalUrl":null,"permalink":"/newsletter/2025w04/","section":"Newsletters","summary":"","title":"2025 W04 一場報告翻車後，我學到了什麼？","type":"newsletter"},{"content":"切換或決定任務常讓人疲憊，而「主題日」提供了一種專注策略。\n方法是為每周的每一天設定明確主題，減少規劃任務的心力消耗。\n▋我的主題日\n2024 年 12 月 19 日，我開始執行「主題日」。\n經過一個半月的實測，這個方法帶來了顯著的變化。\n下圖是主題日的設定：\n▋實測心得\n最大的收穫是 降低了拖延的發生機率。\n拖延常常源於對未知的恐懼，害怕面對不熟悉的事情，導致一再延後。\n有了「主題日」的框架，每天的任務很清晰。\n下班吃完晚餐後，做到電腦前就能自動進入專注模式，完成該做的事。\n這種模式讓我對自己的時間掌控感更強。\n▋改進方向\n白天與晚上的任務分配\n我目前將白天與晚上的時間分為兩種情境：\n相同主題：適合自雇者或全職自由職業者，整天專注於同一類型的任務。\n不同主題：白天處理公司的工作，下班後投入自媒體或副業。這是我目前的狀態。\n然而，我發現下班後的時間有限，一周太多主題會導致不夠聚焦，因此我做了調整。\n▋調整計劃\n聚焦目標：\n目前最迫切的需求是婚禮遊戲的開發。\n因此，我計劃將周一至周五的「主題日」全部設定為遊戲開發，確保進度的推進。\n優化周末規劃：\n假日的進度往往因為休息或家庭陪伴比預期少。\n接下來，我會在周末提前規劃下周的任務，並養成寫日記的習慣。\n這樣不僅能回顧與反思，還能逐步調整策略，提升效率。\n如果你也對「主題日」感興趣，不妨試試看，說不定會發現屬於自己的專注模式！\n歡迎回覆給我，分享你的經驗或問題，我會很樂意和你交流！我的信箱如下：\nmylifeai1116@gmail.com\n— Peter\n","date":"16 January 2025","externalUrl":null,"permalink":"/newsletter/2025w03/","section":"Newsletters","summary":"","title":"2025 W03 40天主題日實踐的真實變化","type":"newsletter"},{"content":"最近因為工作需求，我研究了許多有關如何讓模型在不同領域中都能穩定表現的技術與方法。今天想與大家分享我的整理，希望能帶給你們一些啟發！\n▋什麼是 Domain Shift？ #\r在監督式學習中，我們通常會收集大量資料與對應標籤，例如數字辨識任務會收集 0~9 的手寫數字影像。然而，現實世界的數據往往充滿多樣性，文字可能具有不同的顏色、紋理，甚至拍攝角度，如下圖所示。這些變化導致了Domain Shift，即資料分布的改變，進而影響模型的表現。\n▋人類 vs. 機器：你能認出所有的變化嗎？ #\r對我們人類來說，識別風格各異的物品是輕而易舉的事。相信你一眼就能認出不同的風格，甚至不用太多額外的解釋。然而，這對機器卻是巨大的挑戰。\n如何讓機器像人類一樣，在陌生情境中也能保持準確？\n這正是目前人工智慧的一大研究方向。\n▋什麼是 Domain Generalization？ #\r簡單來說，Domain Generalization（領域泛化）是一種讓模型具備「未卜先知」能力的技術。在沒有見過目標域（Target Domain）的情況下，模型透過僅使用訓練域（Source Domains）的資料進行學習，達成在未知域上的良好表現。\n一個簡單的例子： #\r訓練資料：白天拍攝的街景（Source Domain）。\n測試資料：夜晚或多霧環境的街景（Target Domain）。\n▋ 應用場景 #\r自駕車影像處理\n訓練資料可能來自晴天的道路影像，但目標是應對雨天或夜間的情況。\n醫療影像分析\n訓練資料來自特定醫院的掃描影像，但測試資料可能來自另一家醫院，影像風格可能不同。這對跨醫院的診斷系統尤其重要。\n農業檢測\n訓練資料可能是不同地區的作物影像，目標是讓模型適應全新地區或季節的作物變化。\n▋如何做？ #\r為了實現 Domain Generalization，研究者提出了許多技術方法，包括：\n領域對齊（Domain Alignment）\n元學習（Meta-Learning）\n數據增強（Data Augmentation）\n集成學習（Ensemble Learning）\n自監督學習（Self-Supervised Learning）\n學習解耦表示（Learning Disentangled Representations）\n正則化策略（Regularization Strategies）\n強化學習（Reinforcement Learning, RL）\n儘管方法多樣，如何在不犧牲準確度的前提下，讓模型平衡不同域之間的特性，依然是 Domain Generalization 的一大技術瓶頸。\n我整理了一篇分析這些方法原理與應用的文章，將在下週電子報分享！如果覺得今天的內容有幫助，歡迎轉發給朋友，一起探索這個有趣的主題！\n📢 分享你的觀點！ #\r你是否曾在開發中遇到過「測試資料與訓練資料差異太大」的挑戰？\n歡迎回覆給我，分享你的經驗或問題，我會很樂意和你交流！我的信箱如下：\nmylifeai1116@gmail.com\n參考資料：\nDomain Generalization via Invariant Feature Representation\nDomain Generalization: A Survey\n— Peter\n","date":"9 January 2025","externalUrl":null,"permalink":"/newsletter/2025w02/","section":"Newsletters","summary":"","title":"2025 W02 突破領域限制！探索 Domain Generalization","type":"newsletter"},{"content":"大家新年快樂！🎉\n感謝你在新年的開始，抽空閱讀我的第一封電子報！\n我是Peter，這是一個全新的嘗試，我希望能透過這封信，和你分享我最近學習和挑戰的點滴。\n▋開啟新技能的旅程\n我正在開發一款小遊戲，不僅是為了學習新技能，更希望讓婚禮上的來賓透過遊戲，認識我和我老婆的故事。\n有趣的是，這是我第一次嘗試開發遊戲！\n▋遊戲：被譽為第九藝術的創作形式\n歷史上，藝術被分為八大類：建築、雕塑、繪畫、音樂、舞蹈、戲劇、文學和電影。\n遊戲融合了設計、美術、敘事、音樂和技術，創造出一種獨特的表現方式，讓玩家能「參與」藝術，而不僅僅是「觀賞」。\n要完成一款遊戲，通常需要掌握以下技能：\n遊戲設計：規劃遊戲玩法與體驗\n程式開發：編寫遊戲邏輯與功能\n美術與設計：製作角色與場景的視覺效果\n音樂與音效：營造聲音氛圍\n專案管理與協作：確保進度與團隊協作\n然而，我目前僅具備程式開發的能力。為了彌補其他方面的不足，我積極借助 AI 和網路資源。以下提供幾個我整理好的資源 👇\n遊戲引擎\nGodot 官方文件: 詳細的教學與範例，非常適合新手入門。 圖像\nPixelLab: 利用 AI 生成點陣圖，簡單好用，適合像素風格遊戲。\nItch.io: 海量免費素材，從角色到場景，應有盡有。\n音樂\nSuno: 用 AI 快速生成背景音樂和音效，提升遊戲氛圍。\npixapay: 免費音效庫，適合小型遊戲的快速需求。\n​\n▋學習中的啟發：勇敢試錯\n作為一名AI演算法工程師，我已有7年以上軟體開發的經驗，熟悉各種相關工具，但這次學習遊戲開發卻讓我感受到新手的「小心翼翼」。\n我嘗試了Godot遊戲引擎來開發遊戲，並用點陣圖軟體繪製素材。\n起初，我照著官方教學一步步學習，雖然完成了基礎功能，但總不敢隨意改動，深怕「一不小心就壞掉」。\n然而，這樣的心態讓我停滯了一兩週。於是，我決定換個方式：勇敢試錯。\n我複製了原始檔案，開始大膽修改，抱著「壞掉了就刪掉重來」的心態，這反而讓我快速突破瓶頸，也學到了更多。\n心得：錯了大不了重來，但不嘗試，永遠無法進步。\nA person who has never made a mistake has never tried anything new.\n— Albert Einstein\n​\n▋目前進度：遊戲雛型完成\n目前遊戲已經有了初步的框架，能讓角色移動並完成一些簡單的互動。\n這雖然只是個開始，但卻是我邁向更大可能性的第一步！\n遊戲畫面搶先看 👇\n​\n▋結語：和你分享這段旅程\n接下來，我會繼續完善這款遊戲，並記錄過程中的挑戰與解決方法，分享給有興趣的朋友。\n如果你也正在學習新技能或計畫開始一個專案，希望我的經歷能給你一些啟發！\n那麼你呢？新的一年，你想學什麼新技能或完成什麼目標？\n期待下次與你分享更多內容！\n感謝你的閱讀！如果你對遊戲開發、Godot 引擎，或 AI 相關的話題感興趣，隨時回覆這封信和我聊聊～\n— Peter\n","date":"3 January 2025","externalUrl":null,"permalink":"/newsletter/2025w01/","section":"Newsletters","summary":"","title":"2025 W01 去年我學到的第一課：失敗是最快的學習方式","type":"newsletter"},{"content":"","date":"14 December 2024","externalUrl":null,"permalink":"/tags/programe/","section":"Tags","summary":"","title":"Programe","type":"tags"},{"content":"","date":"14 December 2024","externalUrl":null,"permalink":"/posts/","section":"歡迎來到我部落格 ！","summary":"","title":"歡迎來到我部落格 ！","type":"posts"},{"content":"我非常喜歡分享程式語言和技術新知，特別是對那些對寫程式有興趣、但還沒開始嘗試的人提供建議。然而，對於許多初學者來說，第一個遇到的困難通常是：該選哪種語言開始學習？\n最近，我和一些沒有接觸過程式或非資訊相關背景的人討論學習程式的挑戰，整理出以下幾個常見的阻礙：\n非資訊科系的憂慮：擔心自己背景不足，難以入門。\n電腦設備較舊：擔心現有的硬體無法支援學習需求。\n目標不清楚：雖然看到厲害的應用覺得很有趣，但覺得自己無法達到那樣的程度。\n時間不足：下班後忙著吃飯、運動或做家事，所剩時間有限。\n基於這些阻礙，我以自己的經驗設立了幾個選擇程式語言的指標，幫助初學者做決策：\n可讀性：語言與人類語言的相似程度越高，通常越容易理解。\n環境建置容易度：從一台全新電腦到安裝完成所需軟體的難易度與耗時長短。\n上手容易度：學習基本概念及撰寫簡單程式的難易程度。\n此外，我還參考了 TIOBE Programming Community Index，這是一份程式語言的熱門度指數。簡單來說，這份排名基於程式語言在搜尋引擎中的曝光度，反映了開發者討論、課程和相關職務資訊的數量。需要注意的是，這僅代表熱門度，並不等同於語言的優劣。\n下圖是我撰寫本文時的熱門語言排名。剛好前五名都是我有經驗的語言，因此希望透過分析，給初學者、非資訊科背景者及對程式有興趣的業餘愛好者一些實用的選擇建議。\n彼得的經驗 #\r單刀直入老王賣瓜，Python是最推薦的語言沒有之一，我踏入程式語言世界的接觸順序為 C -\u0026gt; C++ -\u0026gt; JAVA -\u0026gt; C# -\u0026gt; Python，第一個實戰的語言是C#，不過我覺得多少會有偏誤，可能最痛苦的時光是在前三者度過，導致我體感覺得前三者很難。\n可能常常網路上看到Python應用在機器學習，JavaScript、PHP用在網頁設計、C/C++用在底層架構設計等等的文章，這些說法大致沒有問題，對於大多數新手來說，可能也不會很確定未來的明確方向，因此我建議先學習會讓你有容易有成就感的語言，未來再根據學習過程中的經驗來轉換程式語言。\n與其煩惱選擇什麼語言，不如先讓自己有寫程式的邏輯思維。\n接下來，一個重要的考量是使用該語言的人數多寡。當使用者多時，相關的教學文章、討論資源和解決方案也會隨之豐富。此外，有些原本僅支持特定語言的工具，往往會因為社群中熱心的開發者而被移植到其他語言，進一步提升這些語言的實用性。\n因此，本文介紹的程式語言能幫助您完成 99% 的常見任務，至於剩下的 1%，就需要靠您的創意與努力來填補了！\nPython #\r可讀性：★★★★★\n建立環境容易度：★★★★★\n上手容易度：★★★★★\nPython 可以說是當下最火爆的程式語言之一。只要是 AI、大數據相關的文章，幾乎都有八成機會提到它。Python 的設計強調可讀性和簡潔的語法，讓程式撰寫變得非常直觀。以下是「Hello World」（初學者常見的第一個程式，用於在螢幕上顯示指定文字）的程式碼範例：\nprint(\u0026#34;Hello World\u0026#34;) 咦！就這樣嗎？( ﾟ∀ ﾟ)ﾉ 沒錯！就是這樣 (*´∀`)~♥\nC/C++ #\r可讀性：★\n建立環境容易度：★★\n上手容易度：★\n因為這篇文章主要探討入手難易度，所以將 C 和 C++ 放在一起討論。作為台灣 IC 設計與半導體產業的重要語言，C 和 C++ 以接近底層、高效能為特色。雖然它們的學習門檻較高，但在特定領域如硬體開發中不可或缺。以下是兩者的「Hello World」範例：\nC：\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } C++：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello, C++!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } Java #\r可讀性：★★★\n建立環境容易度：★★★★★\n上手容易度：★★★\nJava 是一門經典的程式語言，其穩定性與廣泛應用讓它在近年仍占有重要地位。無論是前端、後端，還是 Android App 開發，Java 都是常見選擇。以下是「Hello World」範例：\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello World!\u0026#34;); } } C# #\r可讀性：★★★★\n建立環境容易度：★\n上手容易度：★★★★\nC# 是微軟推出的程式語言，特別適合在 Windows 環境中使用。它搭配 Visual Studio 開發工具，可以快速建立圖形化介面 (GUI)。然而，由於安裝開發工具耗時，環境建置的難度稍高。以下是 C# 的「Hello World」範例（以終端機為例）：\nnamespace HelloWorld { class Hello { static void Main(string[] args) { System.Console.WriteLine(\u0026#34;Hello World!\u0026#34;); } } } 結論 #\r看完數據和分析，相信讀者已經有了些許啟發。以下是針對常見問題的回應，結合我個人的經驗，希望能消除大家對學程式的疑慮：\nＱ：不是資訊相關科系的憂慮\nＡ：程式語言只是工具，相關科系背景固然有助於加速學習，但並不是必要條件。舉例來說，你不用是水電工也能學會換燈泡。我的一位碩士同學是心理系背景，但後來成為機器學習領域的大神！\nＱ：電腦設備不好，能學嗎？\nＡ：初學程式時，只要電腦能開機，幾乎都能運行基本程式。等到你愛上寫程式後，再花 3 萬塊買台新電腦作為對自己的投資，也是一件值得的事！\nＱ：學了不知道能幹嘛，覺得離應用很遠\nＡ：生活中其實有許多場景都可以應用程式。新聞常報導的高科技應用固然酷炫，但大部分程式的用途其實是解決日常問題。以我為例，我每天早上需要整理 AI 的預測結果並產生報表，原本要花 20 分鐘的事情，透過一個簡單的程式，我只需 5 分鐘完成。多出的時間，能讓我準備其他工作，甚至稍微當個薪水小偷 (*´艸`)。\nＱ：沒有時間可以學程式\nＡ：根據《原子習慣》的理念，一開始不需要逼自己每天學很久，可以從 10 分鐘開始，逐步延長到 1 小時。你可以將下班後躺沙發的 30 分鐘，或睡前滑手機的時間，用來學程式。當你養成習慣，並體驗到成就感後，學習程式會成為日常的一部分。這也是我規劃課程的方向，希望透過短時間、多次數的學習模式，幫助大家利用碎片時間高效入門。\n本文的切入點是為初學者或對程式有興趣的人提供指引。每種語言都有其優缺點，像 Python 雖然很方便，但速度較慢。我希望透過分享知識，讓非資訊背景的人也能享受寫程式帶來的便利。我接下來會規劃以 Python 為起點，循序漸進地帶領大家愛上寫程式！\n","date":"14 December 2024","externalUrl":null,"permalink":"/posts/how_to_choice_programming_language/","section":"歡迎來到我部落格 ！","summary":"我的第一篇文章","title":"該學什麼程式語言","type":"posts"},{"content":"可以自己打造夢幻工作嗎？ 《只工作不上班的自主人生》的作者是瓦基(莊勝翔)，原台積電的副理，在職時工作之餘開始分享讀書心得，是書評部落格「閱讀前哨站」和熱門Podcast說書頻道「下一本讀什麼」的創辦人，下一本讀什麼是我上班通勤中偶然挖到的寶藏。\n我對於分享專業知識很感興趣，原本攻讀博士是為了當教授，但是因為家庭因素而被迫中斷，這本書讓我了解夢幻工作是自己打造，不一定要依照別人的腳步走。\n從自己出發：認識自己 #\r書中提到，我們可以從過往經驗和身份角色中找到方向。第一步，就是回顧經歷，探索過去讓自己熱愛與投入的事物：\n二十歲前你最愛的事是什麼？\n我喜歡玩遊戲、打籃球。尤其是在團隊對抗的遊戲中，我會沉浸其中，享受帶領隊友與思考對手策略的過程，透過知己知彼的方式提高勝利的機會。 哪些事情讓你樂在其中？ 我熱愛分享所學，記得有一次在教會分享人工智慧知識，很多人告訴我，我在分享熱愛的事時眼睛像在發光。除此之外，我也非常享受玩團隊競技類的電腦遊戲，總會從旁觀者角度反思自己的每一個決策，並思考改進空間。 哪些時刻讓你覺得時間飛快？ 在面對群眾分享知識、參與團隊對抗的比賽，以及閱讀新技術並實踐時，時間總是不知不覺地過去。 從以上經驗，我得出幾個結論：\n利人利己的知識分享 研究新事物的心流體驗 團隊對抗的大局觀分析 角色與職業的定位 #\r第二步，我列出了自己的身份角色，從中挑選出符合我興趣和長處的三個職業：\n主管：打造良好的團隊氛圍，共同面對挑戰，引導團隊夥伴前進。 老師：將知識分享給更多人，激發學生的學習動機。 分析師：分析賽局中的局勢，帶領團隊走上勝率最高的路徑，並利用程式進行輔助分析。 這三個職業的共同點是：協助他人找到學習的動機，帶領團隊或學生，分享知識與想法。\n結合前面兩步驟，我發現自己擅長且喜歡的事有：資料處理、程式編寫、解決科技問題，以及富有同理心的溝通能力。\n在學時成績不好可以打造夢幻工作嗎？ #\r「找到可以讓自己充滿生命力的事情，並動手去做，就是這個世界最需要的人」，我認為傳統的學科只能大概的分類，沒辦法實質的涵蓋所有工作內容，因此不該以教育給我的框架來看待的工作。\n家人、朋友推薦的職涯選擇通常出自安全、穩定和薪資，而我們自己也會有面子的考量。仔細思考，我常常被朋友和家人給影響，有時看到社群軟體或群組聊天，總是會羨慕著別人的職位，我也會希望大家以我的職業為榮，因此迷失了方向。作者透過一些引導式問題來讓讀者覺察自己真正要的是什麼，接下來的章節會說明作者怎麼引導我們找到目標。\n以終為始的制定目標 十年願景：想像十年後的今天，你的一天怎麼度過？住在哪裡？做什麼工作？對什麼還有熱情？\n2033/06/23 維持早起的習慣，準備早餐給伴侶和小孩，接著喚醒伴侶和小孩享用早餐，開車載他們前往學校和公司後，我也進公司整理今天待辦的事項，利用15鐘與團隊夥伴們立會，下午會利用時間思考目前專案的戰略，傍晚我會接伴侶和小孩回家，做飯給全家吃。到睡前的時間會根據當天決定陪小孩閱讀、創作等，接著一家人到社區的健身房或游泳池運動，睡前與伴侶和小孩彼此分享今天發生的好事。 住在北部三房兩廳的社區大樓裡，車子能開就好。 我主要的事物帶領研發團隊打造可以幫助到社會的服務，工作之餘我會在部落格和其他影音頻道分享新技術，我希望用科技改善所有人的生活。 對於學習新的知識、帶領團隊、以及推廣知識保持著熱情。 兩年封面故事：想像兩年的今天，有一家主要媒體用你當封面人物，大幅報導並刊登笑容滿面的照片。\n這是哪一家媒體？數位時代 主題?跳脫從學校學習的框架，某科技主管分享任何人用程式改善生活 為什麼決定要推廣程式和科技？想要分享什麼觀點給社會？ 我在大三時偶然加入了軟體實驗室，透過上網自學的方式開啟了職涯的道路，任何人都可以透過程式語言來改善自己的生活，寫程式不一定只是工作，也是一種生活型態，就如同煮飯做菜一般。 要成功達到目標的關鍵，很少是源於外在動機，多半都是從內在動機出發，而內在動機和與生俱來的心理需求有關。\n自我決定理論\n怎麼讓自己一直保持動力？ #\r透過前半部理解了未來的方向，接下來就是十年如一日的朝著目標前進，紀錄自己的進度可以用子彈筆記方法\n十年願景與兩年封面故事\n年度目標：規劃今年要完成的大目標\n未來日誌：安排未來每一個月的中目標\n月誌：記錄每個月的完成的小目標\n日誌：一個肯定、三個任務、三個感恩、一個檢討\n留下紀錄可以用來覆盤，記得我考研的時候，我把每天坐在書桌前的時間記錄下來，好追蹤我在各個科目使用的時間；又或是我在玩英雄聯盟時會去回放失敗的局，找出原因並且在下次改進。\n這邊瓦基也提到，要小心完美主義扯後腿，透過下修標準、放棄不必要的事情、做得開心就好來破解完美主義。\n人生就像馬拉松，需要持之以恆；近看則像是高強度的間歇訓練，是由無數個衝刺、休息、衝刺、休息的循環而成。\n總結：以終為始的心態創造夢幻工作 #\r作者拋出一些問題讓我思考自己真實想要的目標是什麼，將目標拆解後對未來就不再虛無飄渺，且打造夢幻工作不是一時半刻可以完成的，適當的拒絕和放棄可以避免繞遠路。\n我走學術圈是為了當上教授，因家庭因素而轉換了道路，但是在職場我擔任過講師，也會參與之前實驗室的meeting，這讓我覺得不一定要是某個頭銜才能分享知識，只工作不上班的自主人生像是地圖一樣，讓我前方的道路更加明確。\n總結來說，這本書不只適合自由創業者，若是將自由創業改成生活或職場中要完成的任務，也可以透過這些概念來達成目標。\n有些鳥兒是永遠關不住的，因為他的每一片羽翼都沾滿了自由的光輝。總有些人，他們一輩子注定要活到極限，一輩子都想觸碰自己能力的邊界。\n刺激1995\n","date":"10 May 2024","externalUrl":null,"permalink":"/readingnotes/autonomous-life/","section":"閱讀心得","summary":"","title":"《只工作不上班的自主人生》讀後心得","type":"readingnotes"},{"content":"","date":"10 May 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"10 May 2024","externalUrl":null,"permalink":"/categories/reading-notes/","section":"Categories","summary":"","title":"Reading-Notes","type":"categories"},{"content":"","date":"10 May 2024","externalUrl":null,"permalink":"/readingnotes/","section":"閱讀心得","summary":"","title":"閱讀心得","type":"readingnotes"},{"content":"\r這本書通勤時聽瓦基說書（下一本讀什麼 EP.317）而得知的，書中以星際大戰和鐵娘子樂團等作品作為例子，強調了這些作品的共同之處：它們的價值經得起時間的考驗。因此，書的前半部分著重於內容的打造，說明了內容在成功中的重要性。接著，書中探討了如何透過市場定位和行銷策略讓作品曝光。最後，書籍也提到了建立自己名單的重要性。\n分享、進步然後繼續分享 #\r創意並不向雷擊，創作通常始於一個看似有潛力的想法，然後經過努力和互動而演進。不要被完美主義影響，先開始第一個產品，在不斷迭代進步。分享創作給觀眾看，觀眾可以是任何人，朋友、同事、女友甚至是網友，並收集每個建議來優化內容。\n這個概念同樣適用於工作中。提前製作週報，週報清單會詳細列出當週的工作項目，有助於我在週會之前調整自己的進度。最近在做深度學習的教學投影片，經過試教給朋友、女友和同事聽，每次都得到了寶貴的建議，這些建議讓我的投影片變得更加精緻和詳盡。\n使命不是加法，而是減法 #\r我很幸運，不必為三餐煩惱，這使我能夠全心全意地追求我的夢想。在這個世界上，每個人都有自己的使命，不論這使命是什麼，我們都應該清楚地認識和表達它。當我們確定了自己的使命，就必須放棄其他可能的選擇，全力以赴去實現它。\n打造第二道腦一書中提及，費曼用12個難題來滿足求知慾，這不僅僅是一種有意識的篩選接收的資訊的方式，同時也能夠幫助我們更清晰地明確自己的目標。因此，我列出12個我感興趣的問題，這將有助於我更加專注地追求我的目標。\n爆紅是十年如一日的規律產出的結果 #\r行銷任何產品都一樣，你會事先做很多事，讓大眾覺得，你突然出現在很多地方。閱讀這段文章時，我突然恍然大悟：很多產品或課程之所以突然出現在眾多平台上，背後往往是創作者長期的努力與堅持。\n這也意味著，努力並不一定能立即見效，而是需要堅持不懈、持之以恆的努力，才能漸漸看到成果。正是這種每日持之以恆的努力，才讓作品最終曝光於眾。\n對你專屬的主題建立一份名單 #\r儘管有許多社群媒體可供發表文章或提供價值，但流量仍受到平台演算法的控制，因此建立自己的名單仍然至關重要。\n建立名單的最佳方法之一是為人們提供豐富的價值。以下是我目前可以努力的幾個方面：\n在部落格中加入彈出視窗，吸引更多訪客並增加訂閱率。\n提供某種服務，例如免費的教學檔案或通過電子報傳遞價值，以吸引更多訂閱者。\n結語 #\r這本書對我來說是一本經營自媒體的指南針。我希望能夠打造出不會隨著時間流逝而衰退的價值。這本書提供了很多觀點，讓我可以更有方向地在自媒體領域發展。\n透過分享、學習和持之以恆的努力，我們能夠不斷進步並實現我們的目標。不要害怕分享自己的想法和作品，接受反饋並不斷改進，這是成長的關鍵。期許自己可以堅持追求夢想，專注於重要的事情，最終實現使命。\n","date":"21 April 2024","externalUrl":null,"permalink":"/readingnotes/the-art-of-making-and-marketing-work-that-lasts/","section":"閱讀心得","summary":"","title":"《滾動式內容複利》讀後心得","type":"readingnotes"},{"content":"\rSuper skill\r現金促銷廣告炒作下，要小心無意間吸收到「多才好」的觀念，「更多」往往就代表著生活與事業上有更多的壓力、更多的問題，以及更多的責任。\n熱情是努力工作的成果 #\rYou can’t fake passion.\nBarbara Corcoran\n對某份工作的熱情並非一蹴可幾，而是需要時間的培養。在這段時間裡，我們需要累積相關的技能、自信心和人脈，才能真正感受到對工作的熱情。\n曾經我很努力的尋找自己的熱情，換了研究方向和幾份工作。我發現我在跟同事分享程式運作的流程時感到快樂、管理一份專案時讓我感到很有成就感。熱情無法透過想象得出，而是在工作的過程中獲得。\n每週工作超過56小時，生產力快速下降 #\rJohn Pencavel 在文章 The Productivity of Working Hours 一週超過 56 hr 後，工作效率會快速下降。\n週末是用來挖掘你「非工作自我」的時間，並且發現自己是個什麼樣的人。這不一定會讓你成為更優秀的員工，但肯定會讓你成為更優秀的人。\n我認為除了工作以外，探索和提升自我也很重要，上述兩者是相輔相成的，工作可以衡量我的價值，探索和提升自我可以提升我的價值。\n人會被獨特的觀點吸引 #\r對於我生活的環境，以和為貴影響了我很多的決策，不過如果在宣傳產品上，我們的客戶買單的可能是我對於產品信念。一個產品不可能被所有人喜歡，展現自己的觀點來吸引到屬於你的用戶。\n分享知識時要更勇敢述說自己的想法，分享事實之外也要加入自己的觀點。\n在有限的資源下勇敢起步 #\rJim Collins 的研究發現，每間非常賺錢的A+公司，都是在資源有限的情況下就起步，這些公司只專注於一件事，捨棄其他部分。例如，微軟在創立初期只專注於開發個人電腦作業系統，蘋果在創立初期只專注於開發個人電腦。這種專注的做法使A+公司能夠快速推出產品或服務，並在市場上取得領先地位。\n我曾經有好幾年認為當下能力還不足以分享知識。但後來我開始經營自媒體，並將自己學習到的知識分享給讀者。在分享的過程中，我發現自己對知識的理解更加深刻了，也更加擅長表達自己的觀點。此外，讀者的反饋也幫助我改進了分享內容和方式。\n總結 #\r《一人公司》是一本由 Paul Jarvis 撰寫的書籍，該書提出了一個全新的商業理念：質疑成長的企業。作者認為，企業不應該盲目追求成長，而應該專注於自身的核心業務，在有限的資源下做到最好。\n這本書改變了我的視野。以前，我總是認為企業越大越好，但現在我意識到，一人或少人團隊也有很多優勢，例如更靈活、更能專注於自身的核心業務。\n作者在書中提出了很多值得思考的觀點，其中幾個段落也提醒我要勇敢邁出步伐，發表產品並且接受回饋才可以讓產品不斷地變好，不要把夢想留在腦海中。\n我認為，作者的觀點不僅適用於企業，也適用於個人。在工作和生活中，我們都應該追求有意義的成功，而不是盲目追求成長。我們應該找到自己的平衡點，並勇敢地追求自己的目標。\n","date":"12 January 2024","externalUrl":null,"permalink":"/readingnotes/company-of-one/","section":"閱讀心得","summary":"","title":"《一人公司》讀後心得","type":"readingnotes"},{"content":"","externalUrl":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\r#\r嗨，我是 Peter。\n利用業餘的時間，打造遊戲與創作品牌，部落格用來記錄從工程師走向獨立開發者的旅程。\n這裡你會看到我分享：\nGodot 遊戲開發技術筆記\n獨立遊戲開發的創作歷程\n閱讀帶來的啟發\n聯絡我：mylifeai1116@gmail.com\n","externalUrl":null,"permalink":"/about/","section":"彼得叩叩","summary":"","title":"關於我","type":"page"}]